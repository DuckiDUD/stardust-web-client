{"version":3,"file":"static/js/912.9ff0c1c3.chunk.js","mappings":"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","sources":["../node_modules/vidstack/dist/prod/chunks/vidstack-H1mKklxM.js","../node_modules/vidstack/dist/prod/chunks/vidstack-hUoI06DE.js"],"sourcesContent":["import { c as coerceToError } from './vidstack-O_5qKbqC.js';\nimport { c as canGoogleCastSrc } from './vidstack-iVChOPoI.js';\nimport { l as loadScript } from './vidstack-heAoL83T.js';\nimport { I as IS_CHROME, a as IS_IOS } from './vidstack-hp24nviz.js';\nimport { g as getCastContext, a as getCastSession, i as isCastConnected, h as hasLoadedCastFramework, b as isCastAvailable, c as getCastErrorMessage, d as getDefaultCastOptions, e as getCastFrameworkURL } from './vidstack-hUoI06DE.js';\nimport { u as peek, D as DOMEvent } from './vidstack-wnzQJK1n.js';\nimport './vidstack-It6wvZY3.js';\n\nclass GoogleCastLoader {\n  constructor() {\n    this.name = \"google-cast\";\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let openEvent;\n    try {\n      const loadEvent = await this.Pl(ctx);\n      if (!this.aa) {\n        this.aa = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.aa);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.pm(ctx, \"connecting\", openEvent);\n      await this.Rl(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected())\n        this.pm(ctx, \"connected\", openEvent);\n    } catch (message) {\n      const error = coerceToError(message);\n      this.pm(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        new DOMEvent(\"google-cast-prompt-error\", { detail: error })\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: openEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this.aa) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this.aa, ctx);\n  }\n  async Pl(ctx) {\n    if (hasLoadedCastFramework())\n      return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw Error(\n        \"Cast not available.\"\n      );\n    }\n    return loadedEvent;\n  }\n  async Rl(options) {\n    this.Tl(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode)\n      throw Error(getCastErrorMessage(errorCode));\n  }\n  Tl(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  pm(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.delegate.c(\"remote-playback-change\", detail, trigger);\n  }\n}\n\nexport { GoogleCastLoader };\n","import { l as listen } from './vidstack-It6wvZY3.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  return defaultMessage;\n}\nfunction listenCastContextEvent(type, handler) {\n  return listen(getCastContext(), type, handler);\n}\n\nexport { getCastSession as a, isCastAvailable as b, getCastErrorMessage as c, getDefaultCastOptions as d, getCastFrameworkURL as e, getCastSessionMedia as f, getCastContext as g, hasLoadedCastFramework as h, isCastConnected as i, hasActiveCastSession as j, listenCastContextEvent as l };\n"],"names":["GoogleCastLoader","constructor","this","name","cast","getCastContext","mediaType","canPlay","src","IS_CHROME","IS_IOS","canGoogleCastSrc","prompt","ctx","openEvent","_getCastSession","loadEvent","Pl","aa","framework","RemotePlayer","RemotePlayerController","player","createEvent","trigger","dispatchEvent","pm","Rl","peek","$props","googleCast","$state","remotePlaybackInfo","set","deviceName","getCastSession","getCastDevice","friendlyName","isCastConnected","message","error","coerceToError","DOMEvent","detail","dispatch","load","Error","GoogleCastProvider","hasLoadedCastFramework","loadStartEvent","loadScript","getCastFrameworkURL","customElements","whenDefined","loadedEvent","isCastAvailable","options","Tl","errorCode","requestSession","getCastErrorMessage","_this$cast","setOptions","getDefaultCastOptions","state","type","delegate","c","_window$cast","window","_window$chrome","chrome","isAvailable","getCastState","CastState","CONNECTED","CastContext","getInstance","getCurrentSession","getCastSessionMedia","getSessionObj","media","hasActiveCastSession","_getCastSessionMedia","contentId","language","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","resumeSavedSession","androidReceiverCompatible","code","concat","listenCastContextEvent","handler","listen"],"sourceRoot":""}